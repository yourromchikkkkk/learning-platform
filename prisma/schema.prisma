// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String  @id @default(uuid())
  userId      String  @map("user_id")
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @map("image_url") @db.Text
  price       Float?
  isPublished Boolean @default(false) @map("is_published")

  categoryId String?   @map("course_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([categoryId])
  @@map("course")
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId  String   @map("course_id")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([courseId])
  @@map("attachment")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]

  @@map("category")
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData      MuxData?
  userProgress UserProgress[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([courseId])
  @@map("chapters")
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  @@map("mux_data")
}

model UserProgress {
  id          String  @id @default(uuid())
  userId      String
  isCompleted Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("purchases")
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}
